using System.Text.Json.Serialization;

namespace MiraeNet.Core.Discord;

/// <summary>
///     Represents a Discord message.
///     For more information, see the
///     <a href="https://discord.com/developers/docs/resources/channel#message-object">
///         Discord Developer Documentation
///     </a>
///     .
/// </summary>
public class Message
{
    /// <summary>
    ///     The unique identifier for the message.
    /// </summary>
    [JsonPropertyName("id")]
    public required string Id { get; set; }

    /// <summary>
    ///     The content of the message.
    /// </summary>
    [JsonPropertyName("content")]
    public string? Content { get; set; }

    /// <summary>
    ///     The author of the message. This is not guaranteed to be a valid user
    ///     (e.g., a webhook could be the author).
    /// </summary>
    [JsonPropertyName("author")]
    public required User Author { get; set; }

    /// <summary>
    ///     The ID of the channel the message was sent in.
    /// </summary>
    [JsonPropertyName("channel_id")]
    public required string ChannelId { get; set; }

    /// <summary>
    ///     The timestamp of when the message was sent.
    /// </summary>
    [JsonPropertyName("timestamp")]
    public DateTimeOffset Timestamp { get; set; }

    /// <summary>
    ///     The list of users mentioned in the message.
    /// </summary>
    [JsonPropertyName("mentions")]
    public required List<User> Mentions { get; set; }

    /// <summary>
    ///     The list of attachments in the message.
    /// </summary>
    [JsonPropertyName("attachments")]
    public required List<Attachment> Attachments { get; set; }

    /// <summary>
    ///     The type of the message.
    /// </summary>
    [JsonPropertyName("type")]
    public MessageType Type { get; set; }

    /// <summary>
    ///     The message reference object data showing the source of a crosspost,
    ///     channel follow add, pin, or reply message.
    /// </summary>
    [JsonPropertyName("message_reference")]
    public MessageReference? MessageReference { get; set; }
}

/// <summary>
///     Enumerates the types of messages.
/// </summary>
public enum MessageType
{
    /// <summary>
    ///     A default message.
    /// </summary>
    Default = 0,

    /// <summary>
    ///     An indication that a recipient was added from the channel.
    /// </summary>
    RecipientAdd = 1,

    /// <summary>
    ///     An indication that a recipient was removed from the channel.
    /// </summary>
    RecipientRemove = 2,

    /// <summary>
    ///     An indication that a call has started in the channel.
    /// </summary>
    Call = 3,

    /// <summary>
    ///     A indication that the channel name has changed.
    /// </summary>
    ChannelNameChange = 4,

    /// <summary>
    ///     An indication that the channel icon has changed.
    /// </summary>
    ChannelIconChange = 5,

    /// <summary>
    ///     An indication that a new message has been pinned in the channel.
    /// </summary>
    ChannelPinnedMessage = 6,

    /// <summary>
    ///     An indication that a user has joined the guild.
    /// </summary>
    UserJoin = 7,

    /// <summary>
    ///     An indication that a boost was added to the guild.
    /// </summary>
    GuildBoost = 8,

    /// <summary>
    ///     An indication that the guild has been boosted to tier 1.
    /// </summary>
    GuildBoostTier1 = 9,

    /// <summary>
    ///     An indication that the guild has been boosted to tier 2.
    /// </summary>
    GuildBoostTier2 = 10,

    /// <summary>
    ///     An indication that the guild has been boosted to tier 3.
    /// </summary>
    GuildBoostTier3 = 11,

    /// <summary>
    ///     An indication that a follow was added to the channel.
    /// </summary>
    ChannelFollowAdd = 12,

    /// <summary>
    ///     An indication that the guild has been disqualified for discovery.
    /// </summary>
    GuildDiscoveryDisqualified = 14,

    /// <summary>
    ///     An indication that the guild has been requalified for discovery.
    /// </summary>
    GuildDiscoveryRequalified = 15,

    /// <summary>
    ///     An initial warning for the guild discovery grace period.
    /// </summary>
    GuildDiscoveryGracePeriodInitialWarning = 16,

    /// <summary>
    ///     An final warning for the guild discovery grace period.
    /// </summary>
    GuildDiscoveryGracePeriodFinalWarning = 17,

    /// <summary>
    ///     An indication that a thread was created in the channel.
    /// </summary>
    ThreadCreated = 18,

    /// <summary>
    ///     A replying message.
    /// </summary>
    Reply = 19,

    /// <summary>
    ///     A message generated by a chat input command.
    /// </summary>
    ChatInputCommand = 20,

    /// <summary>
    ///     A message that is the first in a thread.
    /// </summary>
    ThreadStarterMessage = 21,

    /// <summary>
    ///     A message that reminds about a guild invite.
    /// </summary>
    GuildInviteReminder = 22,

    /// <summary>
    ///     A message generated by a context menu command.
    /// </summary>
    ContextMenuCommand = 23,

    /// <summary>
    ///     A message generated by an auto moderation action.
    /// </summary>
    AutoModerationAction = 24,

    /// <summary>
    ///     A message related to role subscription purchase.
    /// </summary>
    RoleSubscriptionPurchase = 25,

    /// <summary>
    ///     An indication that an interaction for premium upsell was invoked.
    /// </summary>
    InteractionPremiumUpsell = 26,

    /// <summary>
    ///     An indication for the start of a stage session.
    /// </summary>
    StageStart = 27,

    /// <summary>
    ///     An indication for the end of a stage session.
    /// </summary>
    StageEnd = 28,

    /// <summary>
    ///     An indication for the stage speaker.
    /// </summary>
    StageSpeaker = 29,

    /// <summary>
    ///     An indication for the stage topic.
    /// </summary>
    StageTopic = 31,

    /// <summary>
    ///     A message related to guild application premium subscription.
    /// </summary>
    GuildApplicationPremiumSubscription = 32
}

/// <summary>
///     Represents an attachment in a Discord message.
/// </summary>
public class Attachment
{
    /// <summary>
    ///     The unique identifier for the attachment.
    /// </summary>
    [JsonPropertyName("id")]
    public required string Id { get; set; }

    /// <summary>
    ///     The name of the attachment's file.
    /// </summary>
    [JsonPropertyName("filename")]
    public required string Filename { get; set; }

    /// <summary>
    ///     The media type of the attachment.
    /// </summary>
    [JsonPropertyName("content_type")]
    public string? ContentType { get; set; }

    /// <summary>
    ///     The size of the attachment's file in bytes.
    /// </summary>
    [JsonPropertyName("size")]
    public required int Size { get; set; }

    /// <summary>
    ///     The source URL of the attachment.
    /// </summary>
    [JsonPropertyName("url")]
    public required string Url { get; set; }

    /// <summary>
    ///     A proxied URL of the attachment's file.
    /// </summary>
    [JsonPropertyName("proxy_url")]
    public required string ProxyUrl { get; set; }

    /// <summary>
    ///     The height of the file, if the attachment is an image.
    /// </summary>
    [JsonPropertyName("height")]
    public int? Height { get; set; }

    /// <summary>
    ///     The width of the file, if the attachment is an image.
    /// </summary>
    [JsonPropertyName("width")]
    public int? Width { get; set; }

    /// <summary>
    ///     The duration of the audio file in seconds, if applicable (currently for voice messages).
    /// </summary>
    [JsonPropertyName("duration_secs")]
    public float? DurationSecs { get; set; }
}

/// <summary>
///     Represents a message reference showing the source of a crosspost,
///     channel follow add, pin, or reply message.
/// </summary>
public class MessageReference
{
    /// <summary>
    ///     The unique identifier of the originating message.
    /// </summary>
    [JsonPropertyName("message_id")]
    public string? MessageId { get; set; }

    /// <summary>
    ///     The unique identifier of the channel where the originating message was sent.
    /// </summary>
    [JsonPropertyName("channel_id")]
    public string? ChannelId { get; set; }

    /// <summary>
    ///     The unique identifier of the guild where the originating message was sent.
    /// </summary>
    [JsonPropertyName("guild_id")]
    public string? GuildId { get; set; }

    /// <summary>
    ///     A value indicating whether to return an error if the referenced message does not exist,
    ///     instead of sending as a standard (non-reply) message, when sending.
    /// </summary>
    [JsonPropertyName("fail_if_not_exists")]
    public bool? FailIfNotExists { get; set; }
}